"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[203],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}},9847:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"configuration/template-variables","title":"Template Variables","description":"Instantiate renders the stack template defined in .instantiate/config.yml using Mustache. By default the file is docker-compose.yml (or all.yml for Kubernetes). The following variables are available when the template is processed:","source":"@site/docs/configuration/template-variables.md","sourceDirName":"configuration","slug":"/configuration/template-variables","permalink":"/Instantiate/docs/configuration/template-variables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Environment Variables","permalink":"/Instantiate/docs/configuration/environment-variables"}}');var s=i(4848),t=i(8453);const o={sidebar_position:7},a="Template Variables",c={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"template-variables",children:"Template Variables"})}),"\n",(0,s.jsxs)(n.p,{children:["Instantiate renders the stack template defined in ",(0,s.jsx)(n.code,{children:".instantiate/config.yml"})," using Mustache. By default the file is ",(0,s.jsx)(n.code,{children:"docker-compose.yml"})," (or ",(0,s.jsx)(n.code,{children:"all.yml"})," for Kubernetes). The following variables are available when the template is processed:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PROJECT_KEY"})," - unique identifier for the repository defined in the webhook URL."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MR_ID"})," - identifier of the merge request being deployed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HOST_DOMAIN"})," - value from the ",(0,s.jsx)(n.code,{children:"HOST_DOMAIN"})," environment variable."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HOST_SCHEME"})," - value from the ",(0,s.jsx)(n.code,{children:"HOST_SCHEME"})," environment variable."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HOST_DNS"})," - combination of ",(0,s.jsx)(n.code,{children:"HOST_SCHEME"})," and ",(0,s.jsx)(n.code,{children:"HOST_DOMAIN"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Port variables defined in ",(0,s.jsx)(n.code,{children:".instantiate/config.yml"})," under ",(0,s.jsx)(n.code,{children:"services"}),". For each service defining ",(0,s.jsx)(n.code,{children:"ports"}),", Instantiate exposes variables like ",(0,s.jsx)(n.code,{children:"APP_PORT"})," or ",(0,s.jsx)(n.code,{children:"APP_PORT_1"}),", ",(0,s.jsx)(n.code,{children:"APP_PORT_2"}),", etc. The number provided for ",(0,s.jsx)(n.code,{children:"ports"})," determines how many dynamic ports are reserved."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*_PATH"})," - path on disk of repositories defined for services under ",(0,s.jsx)(n.code,{children:"services"}),". The variable name is the service key uppercased followed by ",(0,s.jsx)(n.code,{children:"_PATH"})," (e.g. ",(0,s.jsx)(n.code,{children:"BACKEND_PATH"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example usage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'services:\n  web:\n    image: nginx\n    ports:\n      - "{{WEB_PORT}}:80"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);