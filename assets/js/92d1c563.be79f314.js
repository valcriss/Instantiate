"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[726],{7227:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"configuration/service-from-git","title":"Service from git","description":"Services can be built from separate repositories. Use the repository block to tell Instantiate where to clone the source code.","source":"@site/docs/configuration/service-from-git.md","sourceDirName":"configuration","slug":"/configuration/service-from-git","permalink":"/Instantiate/docs/configuration/service-from-git","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Prebuild Commands","permalink":"/Instantiate/docs/configuration/prebuild-commands"},"next":{"title":"Examples - Front and Back","permalink":"/Instantiate/docs/examples/front-and-back"}}');var o=t(4848),i=t(8453);const s={sidebar_position:9},c="Service from git",a={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"service-from-git",children:"Service from git"})}),"\n",(0,o.jsxs)(n.p,{children:["Services can be built from separate repositories. Use the ",(0,o.jsx)(n.code,{children:"repository"})," block to tell Instantiate where to clone the source code."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"services:\n  backend:\n    repository:\n      repo: git@github.com:org/backend.git\n      branch: develop\n      behavior: match\n    ports: 1\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Properties"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"repo"})," \u2013 Git URL of the repository."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"branch"})," \u2013 branch to clone. If omitted the repository's default branch is used."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"behavior"})," \u2013 how Instantiate selects the branch:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"fixed"})," (default) always uses the branch defined in ",(0,o.jsx)(n.code,{children:"branch"})," or the default branch."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"match"})," checks if a branch with the same name as the merge request exists. If found that branch is cloned, otherwise it falls back to ",(0,o.jsx)(n.code,{children:"branch"})," or the default branch."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Credentials for cloning can be provided through the environment variables ",(0,o.jsx)(n.code,{children:"REPOSITORY_GITLAB_USERNAME"}),"/",(0,o.jsx)(n.code,{children:"REPOSITORY_GITLAB_TOKEN"})," or ",(0,o.jsx)(n.code,{children:"REPOSITORY_GITHUB_USERNAME"}),"/",(0,o.jsx)(n.code,{children:"REPOSITORY_GITHUB_TOKEN"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);