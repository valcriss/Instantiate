"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[621],{6514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"configuration/orchestrators/configuration-docker","title":"Configuration Docker","description":"Set orchestrator: compose in .instantiate/config.yml and provide a standard Compose template. By default Instantiate reads .instantiate/docker-compose.yml but you can override this path with the stackfile property.","source":"@site/docs/configuration/orchestrators/configuration-docker.md","sourceDirName":"configuration/orchestrators","slug":"/configuration/orchestrators/configuration-docker","permalink":"/Instantiate/docs/configuration/orchestrators/configuration-docker","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/Instantiate/docs/getting-started/installation"},"next":{"title":"Configuration Swarm","permalink":"/Instantiate/docs/configuration/orchestrators/configuration-swarm"}}');var r=t(4848),i=t(8453);const a={sidebar_position:3},s="Configuration Docker",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuration-docker",children:"Configuration Docker"})}),"\n",(0,r.jsxs)(n.p,{children:["Set ",(0,r.jsx)(n.code,{children:"orchestrator: compose"})," in ",(0,r.jsx)(n.code,{children:".instantiate/config.yml"})," and provide a standard Compose template. By default Instantiate reads ",(0,r.jsx)(n.code,{children:".instantiate/docker-compose.yml"})," but you can override this path with the ",(0,r.jsx)(n.code,{children:"stackfile"})," property."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .instantiate/config.yml\norchestrator: compose\nstackfile: docker-compose.yml\n\nservices:\n  app:\n    ports: 1\n  backend:\n    repository:\n      repo: git@github.com:org/backend.git\n      branch: develop\n      behavior: match\n    ports: 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"behavior"})," property controls how Instantiate selects the branch to clone:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fixed"})," (default) always clones the branch specified in ",(0,r.jsx)(n.code,{children:"branch"})," (or the repository's default branch if ",(0,r.jsx)(n.code,{children:"branch"})," is omitted)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"match"})," tries to clone a branch with the same name as the merge request. If that branch does not exist, the value of ",(0,r.jsx)(n.code,{children:"branch"})," or the default branch is used instead."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .instantiate/docker-compose.yml\nservices:\n  app:\n    build: .\n    ports:\n      - "{{APP_PORT}}:3000"\n  backend:\n    build:\n      context: {{BACKEND_PATH}}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(6540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);