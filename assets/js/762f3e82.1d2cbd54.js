"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[550],{157:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"configuration/orchestrators/configuration-swarm","title":"Configuration Swarm","description":"To deploy stacks on Docker Swarm set orchestrator: swarm and use a Compose file with Swarm specific options. The stack template defaults to .instantiate/docker-compose.yml and can be changed with the stackfile option.","source":"@site/docs/configuration/orchestrators/configuration-swarm.md","sourceDirName":"configuration/orchestrators","slug":"/configuration/orchestrators/configuration-swarm","permalink":"/Instantiate/docs/configuration/orchestrators/configuration-swarm","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Configuration Docker","permalink":"/Instantiate/docs/configuration/orchestrators/configuration-docker"},"next":{"title":"Configuration Kubernetes","permalink":"/Instantiate/docs/configuration/orchestrators/configuration-kubernetes"}}');var r=o(4848),i=o(8453);const s={sidebar_position:4},a="Configuration Swarm",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuration-swarm",children:"Configuration Swarm"})}),"\n",(0,r.jsxs)(n.p,{children:["To deploy stacks on Docker Swarm set ",(0,r.jsx)(n.code,{children:"orchestrator: swarm"})," and use a Compose file with Swarm specific options. The stack template defaults to ",(0,r.jsx)(n.code,{children:".instantiate/docker-compose.yml"})," and can be changed with the ",(0,r.jsx)(n.code,{children:"stackfile"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .instantiate/config.yml\norchestrator: swarm\nstackfile: docker-compose.yml\n\nservices:\n  web:\n    prebuild:\n      image: node:23\n      commands:\n        - npm install\n        - npm run build\n    ports: 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Use the optional ",(0,r.jsx)(n.code,{children:"prebuild"})," object to run commands before Docker builds the image. Commands execute inside a temporary container defined by ",(0,r.jsx)(n.code,{children:"image"}),". The service code is mounted in ",(0,r.jsx)(n.code,{children:"/app"})," by default and can be changed using ",(0,r.jsx)(n.code,{children:"mountpath"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .instantiate/docker-compose.yml\nservices:\n  web:\n    image: nginx\n    deploy:\n      replicas: 1\n    ports:\n      - "{{WEB_PORT}}:80"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(6540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);