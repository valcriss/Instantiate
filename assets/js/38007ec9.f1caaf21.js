"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[402],{6534:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"configuration/prebuild-commands","title":"Prebuild Commands","description":"Prebuild commands let you prepare the source code of a service before its image is built. They execute inside a temporary container using the image you specify.","source":"@site/docs/configuration/prebuild-commands.md","sourceDirName":"configuration","slug":"/configuration/prebuild-commands","permalink":"/Instantiate/docs/configuration/prebuild-commands","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Template Variables","permalink":"/Instantiate/docs/configuration/template-variables"},"next":{"title":"Service from git","permalink":"/Instantiate/docs/configuration/service-from-git"}}');var o=i(4848),s=i(8453);const r={sidebar_position:8},c="Prebuild Commands",a={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"prebuild-commands",children:"Prebuild Commands"})}),"\n",(0,o.jsx)(n.p,{children:"Prebuild commands let you prepare the source code of a service before its image is built. They execute inside a temporary container using the image you specify."}),"\n",(0,o.jsxs)(n.p,{children:["Add a ",(0,o.jsx)(n.code,{children:"prebuild"})," block under a service in ",(0,o.jsx)(n.code,{children:".instantiate/config.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"services:\n  api:\n    prebuild:\n      image: node:23\n      commands:\n        - npm ci\n        - npm run build\n    ports: 1\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Properties"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"image"})," \u2013 Docker image used to run the commands."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"commands"})," \u2013 list of shell commands executed sequentially with ",(0,o.jsx)(n.code,{children:"sh -c"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"mountpath"})," \u2013 optional path where the repository is mounted inside the container. Defaults to ",(0,o.jsx)(n.code,{children:"/app"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["If the service defines a ",(0,o.jsx)(n.code,{children:"repository"})," section, Instantiate clones that repository and mounts it when running the commands. Otherwise the main project directory is mounted. When using Docker you must also mount the directory defined by ",(0,o.jsx)(n.code,{children:"WORKING_PATH"})," (default ",(0,o.jsx)(n.code,{children:"/tmp"}),") on the host so these cloned repositories are accessible."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);